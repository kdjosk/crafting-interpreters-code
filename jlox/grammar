// REPL start rule
program -> (expression | declaration) EOF ;

// File start rule 
program -> (declaration*) EOF ;

declaration -> varDecl 
              | funDecl 
              | statement ;

statement -> exprStmt 
            | ifStmt 
            | printStmt
            | whileStmt
            | forStmt
            | jumpStmt
            | block ;
            
varDecl -> "var" IDENTIFIER ( "=" expression )? ";" ;

funDecl -> "fun" function ;
function -> IDENTIFIER "(" parameters? ")" block ; 
parameters -> IDENTIFIER ( "," IDENTIFIER )* ;

exprStmt -> expression ";" ;
ifStmt -> "if" "(" expression ")" statement ( "else" statement )? ;
printStmt -> "print" expression ";" ;
whileStmt -> "while" "(" expression ")" statement ;
forStmt -> "for" "(" ( varDecl | exprStmt | ";") expression? ";" expression? ")" statement ;
jumpStmt -> breakStmt 
            | continueStmt
            | returnStmt ;

breakStmt -> "break" ";" ;
continueStmt -> "continue" ";" ;
returnStmt -> "return" expression? ";" ;

block -> "{" declaration* "}" ;

expression -> assignment ( "," assignment )* | errExprNoLeftOperand ;
errExprNoLeftOperand -> ( "," assignment )* ;

assignment -> IDENTIFIER "=" assignment | ternary | errAssignNoLeftOperand ;
errAssignNoLeftOperand -> "=" assignment ;

ternary -> logic_or ( "?" logic_or ":" ternary )? ;

logic_or -> logic_and ( "or" logic_and )* | errLogic_orNoLeftOperand ;
errLogic_orNoLeftOperand -> ("or" logic_and)* ;

logic_and -> equality ( "and" equality )* | errLogic_andNoLetOperand;
errLogic_andNoLeftOperand -> ( "and" equality )* ;

equality -> comparison ( ( "!=" | "==" ) comparison )* | errEqualityNoLeftOperand ;
errEqualityNoLeftOperand -> ( ( "!=" | "==" ) comparison )* ;

comparison -> term ( ( ">" | ">=" | "<" | "<=") term )* | errComparisonNoLeftOperand ; 
errComparisonNoLeftOperand -> ( ( ">" | ">=" | "<" | "<=") term )* ; 

term -> factor ( ( "-" | "+" ) factor )* | errTermNoLeftOperand;
errTermNoLeftOperand -> ( "+" factor )* ;

factor -> unary ( ( "/" | "*" ) unary )* | errFactorNoLeftOperand ;
errFactorNoLeftOperand -> ( ( "/" | "*" ) unary )* ;

unary -> ( "!" | "-" ) unary | call ;

call -> primary ( "(" arguments? ")" )* ;
arguments -> assignment ( "," assignment)* ;  // can't use "," operator in args

primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")"
            | variableExpr ;

variableExpr - > IDENTIFIER

ternary -> expression "?" expression ":" expression ;
